#ifndef ECUCFG_COM_2_0_METADATA_VARIANT
// =========================================================================================================================
// generated for COM at 2020-04-03 08:28:32
//
// begin generated constexpr:
// =========================================================================================================================
#define ECUCFG_COM_2_0_METADATA_VARIANT "THIS IS THE INCLUDE-GUARD"
#ifndef ECUCFG_COM_METADATA_NAME
#define ECUCFG_COM_METADATA_NAME "COM"
#endif
//
class COM_constexpr
{
public:
    static constexpr int majorVersion = 2; // consolidated support of AR 19-11
    static constexpr int minorVersion = 0;
    static constexpr int A_ApplicationArrayElement_arraySizeHandling = 1;                                //
    static constexpr int A_ApplicationArrayElement_arraySizeSemantics = 2;                               //
    static constexpr int A_ApplicationArrayElement_maxNumberOfElements = 3;                              //
    static constexpr int A_ApplicationArrayElement_shortName = 0;                                        //
    static constexpr int A_ApplicationAssocMapElement_Key_shortName = 0;                                 //
    static constexpr int A_ApplicationAssocMapElement_Value_shortName = 0;                               //
    static constexpr int A_ApplicationRecordElement_isOptional = 1;                                      //
    static constexpr int A_ApplicationRecordElement_shortName = 0;                                       //
    static constexpr int A_AutosarDataType_arraySize = 3;                                                //
    static constexpr int A_AutosarDataType_kind = 1;                                                     //
    static constexpr int A_AutosarDataType_nameSpace = 2;                                                // retrieve namespace in expected notation
    static constexpr int A_AutosarDataType_shortName = 0;                                                //
    static constexpr int A_AutosarDataType_typeEmitter = 4;                                              //
    static constexpr int A_DataTypeMappingSet_shortName = 0;                                             //
    static constexpr int A_EthConnectorAddressIPV4_ipv4Address = 0;                                      //
    static constexpr int A_EthConnectorAddressIPV4_ipv4AddressSource = 1;                                //
    static constexpr int A_EthConnectorAddressIPV4_networkMask = 2;                                      //
    static constexpr int A_EthConnectorAddressIPV4_ttl = 3;                                              //
    static constexpr int A_EthConnectorAddressIPV6_ipv6Address = 0;                                      //
    static constexpr int A_EthConnectorAddressIPV6_ipv6AddressSource = 1;                                //
    static constexpr int A_EthConnector_shortName = 0;                                                   //
    static constexpr int A_IREF4PortPrototype_base = 1;                                                  // necessary for GW implementation / used during runtime
    static constexpr int A_IREF4PortPrototype_contextRootSwComponentPrototype = 2;                       //
    static constexpr int A_IREF4PortPrototype_processShortName = 0;                                      // necessary for GW implementation / used during runtime
    static constexpr int A_IREF4PortPrototype_targetPortPrototype = 3;                                   //
    static constexpr int A_ImplementationCppSubElement_inplace = 2;                                      //
    static constexpr int A_ImplementationCppSubElement_isOptional = 1;                                   //
    static constexpr int A_ImplementationCppSubElement_shortName = 0;                                    //
    static constexpr int A_ImplementationCppTemplateArgument_category = 0;                               // necessary for serializer implementation / used during runtime
    static constexpr int A_ImplementationCppTemplateArgument_inplace = 1;                                // necessary for serializer implementation / used during runtime
    static constexpr int A_IpcConnector_shortName = 0;                                                   //
    static constexpr int A_LITERAL_mappedValue = 1;                                                      // provide ENUM value per LITERAL (other data sources)
    static constexpr int A_LITERAL_value = 0;                                                            // provide ENUM value per LITERAL (data source = AUTOSAR)
    static constexpr int A_MachineDesign_shortName = 0;                                                  //
    static constexpr int A_ProcessDesign_exectutableName = 1;                                            //
    static constexpr int A_ProcessDesign_shortName = 0;                                                  //
    static constexpr int A_ProvidedSomeipEventGroup_delayMaxValue = 2;                                   // time in [ms] as int
    static constexpr int A_ProvidedSomeipEventGroup_delayMinValue = 3;                                   // time in [ms] as int
    static constexpr int A_ProvidedSomeipEventGroup_eventMulticastUdpPort = 4;                           //
    static constexpr int A_ProvidedSomeipEventGroup_ipv4MulticastIpAddress = 5;                          //
    static constexpr int A_ProvidedSomeipEventGroup_ipv6MulticastIpAddress = 6;                          //
    static constexpr int A_ProvidedSomeipEventGroup_multicastThreshold = 1;                              // necessary for GW implementation / used during runtime
    static constexpr int A_ProvidedSomeipEventGroup_shortName = 0;                                       // necessary for GW implementation / used during runtime
    static constexpr int A_ProvidedSomeipEventProps_udpCollectionBufferTimeout = 0;                      //
    static constexpr int A_ProvidedSomeipEventProps_udpCollectionTrigger_text = 1;                       // enum literal as text
    static constexpr int A_ProvidedSomeipMethodProps_udpCollectionBufferTimeout = 0;                     //
    static constexpr int A_ProvidedSomeipMethodProps_udpCollectionTrigger_text = 1;                      // enum literal as text
    static constexpr int A_ProvidedSomeipServiceInstance_delayMaxValue = 11;                             // time in [ms] as int
    static constexpr int A_ProvidedSomeipServiceInstance_delayMinValue = 12;                             // time in [ms] as int
    static constexpr int A_ProvidedSomeipServiceInstance_initialDelayMaxValue = 7;                       // time in [ms] as int
    static constexpr int A_ProvidedSomeipServiceInstance_initialDelayMinValue = 8;                       // time in [ms] as int
    static constexpr int A_ProvidedSomeipServiceInstance_initialRepetitionsBaseDelay = 9;                // time in [ms] as int
    static constexpr int A_ProvidedSomeipServiceInstance_initialRepetitionsMax = 10;                     //
    static constexpr int A_ProvidedSomeipServiceInstance_loadBalancingPriority = 1;                      //
    static constexpr int A_ProvidedSomeipServiceInstance_loadBalancingWeight = 2;                        //
    static constexpr int A_ProvidedSomeipServiceInstance_offerCyclicDelay = 5;                           // time in [ms] as int
    static constexpr int A_ProvidedSomeipServiceInstance_sdServerConfig_shortName = 4;                   // necessary for GW implementation / used during runtime
    static constexpr int A_ProvidedSomeipServiceInstance_serviceInstanceId = 3;                          // necessary for GW implementation / used during runtime
    static constexpr int A_ProvidedSomeipServiceInstance_serviceOfferTimeToLive = 6;                     //
    static constexpr int A_ProvidedSomeipServiceInstance_shortName = 0;                                  // necessary for GW implementation / used during runtime
    static constexpr int A_ProvidedUserDefinedServiceInstance_shortName = 0;                             //
    static constexpr int A_ProvidedUserDefinedServiceInstance_vrte_serviceInstanceID = 1;                // VRTE manifest extension: attribute 'serviceInstanceID'
    static constexpr int A_ROOT_name = 0;                                                                // ROOT Structure NOT TO BE CHANGED !
    static constexpr int A_RequiredSomeipEventGroup_delayMaxValue = 2;                                   // time in [ms] as int
    static constexpr int A_RequiredSomeipEventGroup_delayMinValue = 3;                                   // time in [ms] as int
    static constexpr int A_RequiredSomeipEventGroup_shortName = 0;                                       // necessary for GW implementation / used during runtime
    static constexpr int A_RequiredSomeipEventGroup_subscribeEventgroupRetryDelay = 4;                   // time in [ms] as int
    static constexpr int A_RequiredSomeipEventGroup_subscribeEventgroupRetryMax = 5;                     //
    static constexpr int A_RequiredSomeipEventGroup_timeToLive = 1;                                      //
    static constexpr int A_RequiredSomeipMethodProps_udpCollectionBufferTimeout = 0;                     //
    static constexpr int A_RequiredSomeipMethodProps_udpCollectionTrigger_text = 1;                      // enum literal as text
    static constexpr int A_RequiredSomeipServiceInstance_initialDelayMaxValue = 5;                       // time in [ms] as int
    static constexpr int A_RequiredSomeipServiceInstance_initialDelayMinValue = 6;                       // time in [ms] as int
    static constexpr int A_RequiredSomeipServiceInstance_initialRepetitionsBaseDelay = 7;                // time in [ms] as int
    static constexpr int A_RequiredSomeipServiceInstance_initialRepetitionsMax = 8;                      //
    static constexpr int A_RequiredSomeipServiceInstance_requiredMinorVersion = 1;                       // necessary for GW implementation / used during runtime
    static constexpr int A_RequiredSomeipServiceInstance_requiredServiceInstanceId = 2;                  // necessary for GW implementation / used during runtime
    static constexpr int A_RequiredSomeipServiceInstance_sdClientConfigShortName = 3;                    //
    static constexpr int A_RequiredSomeipServiceInstance_serviceFindTimeToLive = 4;                      //
    static constexpr int A_RequiredSomeipServiceInstance_shortName = 0;                                  // necessary for GW implementation / used during runtime
    static constexpr int A_RequiredSomeipServiceInstance_versionDrivenFindBehavior_text = 9;             // enum literal as text
    static constexpr int A_RequiredSomeipServiceVersionBlacklist_majorVersion = 0;                       //
    static constexpr int A_RequiredSomeipServiceVersionBlacklist_minorVersion = 1;                       //
    static constexpr int A_RequiredUserDefinedServiceInstance_shortName = 0;                             //
    static constexpr int A_RequiredUserDefinedServiceInstance_vrte_serviceInstanceID = 1;                // VRTE manifest extension: attribute 'serviceInstanceID'
    static constexpr int A_ServiceInstanceToPortPrototypeMapping_shortName = 0;                          // necessary for GW implementation / used during runtime
    static constexpr int A_ServiceInterfaceEvent_shortName = 0;                                          //
    static constexpr int A_ServiceInterfaceField_hasGetter = 1;                                          //
    static constexpr int A_ServiceInterfaceField_hasNotifier = 2;                                        //
    static constexpr int A_ServiceInterfaceField_hasSetter = 3;                                          //
    static constexpr int A_ServiceInterfaceField_shortName = 0;                                          //
    static constexpr int A_ServiceInterfaceMethodArgument_direction_text = 1;                            // enum literal as text
    static constexpr int A_ServiceInterfaceMethodArgument_serverArgumentImplPolicy_text = 2;             // enum literal as text
    static constexpr int A_ServiceInterfaceMethodArgument_shortName = 0;                                 //
    static constexpr int A_ServiceInterfaceMethod_fireAndForget = 1;                                     //
    static constexpr int A_ServiceInterfaceMethod_shortName = 0;                                         //
    static constexpr int A_ServiceInterface_majorVersion = 2;                                            //
    static constexpr int A_ServiceInterface_minorVersion = 3;                                            //
    static constexpr int A_ServiceInterface_nameSpace = 1;                                               // retrieve namespace in expected notation
    static constexpr int A_ServiceInterface_shortName = 0;                                               //
    static constexpr int A_SomeipEventDeployment_eventId = 1;                                            // necessary for GW implementation / used during runtime
    static constexpr int A_SomeipEventDeployment_maximumSegmentLength = 2;                               //
    static constexpr int A_SomeipEventDeployment_separationTime = 3;                                     // time in [ms] as int
    static constexpr int A_SomeipEventDeployment_serializer_text = 5;                                    // enum literal as text
    static constexpr int A_SomeipEventDeployment_shortName = 0;                                          // necessary for GW implementation / used during runtime
    static constexpr int A_SomeipEventDeployment_transportProtocol_text = 4;                             // enum literal as text / necessary for GW implementation / used during runtime
    static constexpr int A_SomeipEventGroup_eventGroupId = 1;                                            // necessary for GW implementation / used during runtime
    static constexpr int A_SomeipEventGroup_shortName = 0;                                               // necessary for GW implementation / used during runtime
    static constexpr int A_SomeipFieldDeployment_Notifier_eventId = 1;                                   // necessary for GW implementation / used during runtime
    static constexpr int A_SomeipFieldDeployment_Notifier_maximumSegmentLength = 2;                      //
    static constexpr int A_SomeipFieldDeployment_Notifier_separationTime = 3;                            // time in [ms] as int
    static constexpr int A_SomeipFieldDeployment_Notifier_serializer_text = 5;                           // enum literal as text
    static constexpr int A_SomeipFieldDeployment_Notifier_shortName = 0;                                 // necessary for GW implementation / used during runtime
    static constexpr int A_SomeipFieldDeployment_Notifier_transportProtocol_text = 4;                    // enum literal as text
    static constexpr int A_SomeipFieldDeployment_get_maximumSegmentLengthRequest = 1;                    //
    static constexpr int A_SomeipFieldDeployment_get_maximumSegmentLengthResponse = 2;                   //
    static constexpr int A_SomeipFieldDeployment_get_methodId = 3;                                       // necessary for GW implementation / used during runtime
    static constexpr int A_SomeipFieldDeployment_get_separationTimeRequest = 4;                          // time in [ms] as int
    static constexpr int A_SomeipFieldDeployment_get_separationTimeResponse = 5;                         // time in [ms] as int
    static constexpr int A_SomeipFieldDeployment_get_shortName = 13;                                     //
    static constexpr int A_SomeipFieldDeployment_get_transportProtocol_text = 6;                         // enum literal as text / necessary for GW implementation / used during runtime
    static constexpr int A_SomeipFieldDeployment_set_maximumSegmentLengthRequest = 7;                    //
    static constexpr int A_SomeipFieldDeployment_set_maximumSegmentLengthResponse = 8;                   // necessary for GW implementation / used during runtime
    static constexpr int A_SomeipFieldDeployment_set_methodId = 9;                                       // necessary for GW implementation / used during runtime
    static constexpr int A_SomeipFieldDeployment_set_separationTimeRequest = 10;                         // time in [ms] as int
    static constexpr int A_SomeipFieldDeployment_set_separationTimeResponse = 11;                        // time in [ms] as int
    static constexpr int A_SomeipFieldDeployment_set_shortName = 14;                                     //
    static constexpr int A_SomeipFieldDeployment_set_transportProtocol_text = 12;                        // enum literal as text / necessary for GW implementation / used during runtime
    static constexpr int A_SomeipFieldDeployment_shortName = 0;                                          // necessary for GW implementation / used during runtime
    static constexpr int A_SomeipMethodDeployment_maximumSegmentLengthRequest = 1;                       //
    static constexpr int A_SomeipMethodDeployment_maximumSegmentLengthResponse = 2;                      //
    static constexpr int A_SomeipMethodDeployment_methodId = 3;                                          // necessary for GW implementation / used during runtime
    static constexpr int A_SomeipMethodDeployment_separationTimeRequest = 4;                             // time in [ms] as int
    static constexpr int A_SomeipMethodDeployment_separationTimeResponse = 5;                            // time in [ms] as int
    static constexpr int A_SomeipMethodDeployment_shortName = 0;                                         // necessary for GW implementation / used during runtime
    static constexpr int A_SomeipMethodDeployment_transportProtocol_text = 6;                            // enum literal as text / necessary for GW implementation / used during runtime
    static constexpr int A_SomeipSdAddressIPV4_ipv4Address = 0;                                          //
    static constexpr int A_SomeipSdAddressIPV4_ipv4AddressSource = 1;                                    //
    static constexpr int A_SomeipSdAddressIPV4_networkMask = 2;                                          //
    static constexpr int A_SomeipSdAddressIPV4_ttl = 3;                                                  //
    static constexpr int A_SomeipSdAddressIPV6_ipv6Address = 0;                                          //
    static constexpr int A_SomeipSdAddressIPV6_ipv6AddressSource = 1;                                    //
    static constexpr int A_SomeipServiceInterfaceDeployment_majorVersion = 2;                            // necessary for GW implementation / used during runtime
    static constexpr int A_SomeipServiceInterfaceDeployment_minorVersion = 3;                            // necessary for GW implementation / used during runtime
    static constexpr int A_SomeipServiceInterfaceDeployment_serviceInterfaceId = 1;                      // necessary for GW implementation / used during runtime
    static constexpr int A_SomeipServiceInterfaceDeployment_shortName = 0;                               // necessary for GW implementation / used during runtime
    static constexpr int A_TransformationPropsApSomeip_alignment = 1;                                    //
    static constexpr int A_TransformationPropsApSomeip_byteOrder_text = 2;                               // enum literal as text
    static constexpr int A_TransformationPropsApSomeip_implementsLegacyStringSerialization = 11;         //
    static constexpr int A_TransformationPropsApSomeip_isDynamicLengthFieldSize = 3;                     //
    static constexpr int A_TransformationPropsApSomeip_sessionHandling_text = 4;                         // enum literal as text
    static constexpr int A_TransformationPropsApSomeip_shortName = 0;                                    //
    static constexpr int A_TransformationPropsApSomeip_sizeOfArrayLengthField = 5;                       //
    static constexpr int A_TransformationPropsApSomeip_sizeOfStringLengthField = 6;                      //
    static constexpr int A_TransformationPropsApSomeip_sizeOfStructLengthField = 7;                      //
    static constexpr int A_TransformationPropsApSomeip_sizeOfUnionLengthField = 8;                       //
    static constexpr int A_TransformationPropsApSomeip_sizeOfUnionTypeSelectorField = 9;                 //
    static constexpr int A_TransformationPropsApSomeip_stringEncoding = 10;                              //
    static constexpr int A_TransformationPropsSet_shortName = 0;                                         //
    static constexpr int A_UserDefinedEventDeployment_shortName = 0;                                     //
    static constexpr int A_UserDefinedFieldDeployment_get_shortName = 1;                                 //
    static constexpr int A_UserDefinedFieldDeployment_notifier_shortName = 3;                            //
    static constexpr int A_UserDefinedFieldDeployment_set_shortName = 2;                                 //
    static constexpr int A_UserDefinedFieldDeployment_shortName = 0;                                     //
    static constexpr int A_UserDefinedMethodDeployment_shortName = 0;                                    //
    static constexpr int A_UserDefinedServiceInterfaceDeployment_category = 1;                           //
    static constexpr int A_UserDefinedServiceInterfaceDeployment_shortName = 0;                          //
    static constexpr int C_AutosarDataType_arrayElement = 0;                                             //
    static constexpr int C_AutosarDataType_cppSubElement = 4;                                            // concrete classes are CustomCppImplementationDataType and StdCppImplementationDataType
    static constexpr int C_AutosarDataType_cppTemplateArgument = 5;                                      // concrete classes are CustomCppImplementationDataType and StdCppImplementationDataType
    static constexpr int C_AutosarDataType_mapElement_Key = 1;                                           //
    static constexpr int C_AutosarDataType_mapElement_Value = 2;                                         //
    static constexpr int C_AutosarDataType_recordElement = 3;                                            //
    static constexpr int C_DataTypeMappingSet_dataTypeMap = 0;                                           //
    static constexpr int C_ENUMS_ENUM = 0;                                                               // LITERAL container for an ENUM
    static constexpr int C_ENUM_LITERAL = 0;                                                             //
    static constexpr int C_EthConnector_addressIPV4 = 0;                                                 //
    static constexpr int C_EthConnector_addressIPV6 = 1;                                                 //
    static constexpr int C_IREF4PortPrototype_OWNERS = 0;                                                //
    static constexpr int C_IREFS_IREF4PortPrototype = 0;                                                 //
    static constexpr int C_MachineDesign_sdConfig = 0;                                                   //
    static constexpr int C_ProvidedSomeipServiceInstance_eventProps = 1;                                 //
    static constexpr int C_ProvidedSomeipServiceInstance_methodResponseProps = 2;                        //
    static constexpr int C_ProvidedSomeipServiceInstance_providedEventGroup = 0;                         //
    static constexpr int C_ROOT_AutosarDataType = 6;                                                     // envelope for all concrete types in scope
    static constexpr int C_ROOT_DataTypeMappingSet = 12;                                                 //
    static constexpr int C_ROOT_ENUMS = 1;                                                               // ENUMS container
    static constexpr int C_ROOT_EthConnector = 4;                                                        //
    static constexpr int C_ROOT_IREFS = 2;                                                               // IREFS container
    static constexpr int C_ROOT_IpcConnector = 14;                                                       //
    static constexpr int C_ROOT_MachineDesign = 3;                                                       //
    static constexpr int C_ROOT_ProcessDesign = 5;                                                       //
    static constexpr int C_ROOT_ProvidedSomeipServiceInstance = 9;                                       //
    static constexpr int C_ROOT_ProvidedUserDefinedServiceInstance = 16;                                 //
    static constexpr int C_ROOT_RequiredSomeipServiceInstance = 10;                                      //
    static constexpr int C_ROOT_RequiredUserDefinedServiceInstance = 17;                                 //
    static constexpr int C_ROOT_ServiceInstanceToPortPrototypeMapping = 11;                              //
    static constexpr int C_ROOT_ServiceInterface = 7;                                                    //
    static constexpr int C_ROOT_SomeipServiceInterfaceDeployment = 8;                                    //
    static constexpr int C_ROOT_TransformationPropsSet = 13;                                             //
    static constexpr int C_ROOT_UNUSED = 0;                                                              // UNUSED container allows to keep nodeIndex sequence if nodes are disabled.
    static constexpr int C_ROOT_UserDefinedServiceInterfaceDeployment = 15;                              //
    static constexpr int C_RequiredSomeipServiceInstance_blacklistedVersion = 2;                         //
    static constexpr int C_RequiredSomeipServiceInstance_methodRequestProps = 1;                         //
    static constexpr int C_RequiredSomeipServiceInstance_requiredEventGroup = 0;                         //
    static constexpr int C_ServiceInterfaceMethod_argument = 0;                                          //
    static constexpr int C_ServiceInterface_event = 0;                                                   //
    static constexpr int C_ServiceInterface_field = 2;                                                   //
    static constexpr int C_ServiceInterface_method = 1;                                                  //
    static constexpr int C_SomeipEventGroup_event = 0;                                                   //
    static constexpr int C_SomeipFieldDeployment_notifier = 0;                                           //
    static constexpr int C_SomeipServiceDiscovery_addressIPV4 = 0;                                       //
    static constexpr int C_SomeipServiceDiscovery_addressIPV6 = 1;                                       //
    static constexpr int C_SomeipServiceInterfaceDeployment_eventDeployment = 0;                         //
    static constexpr int C_SomeipServiceInterfaceDeployment_eventGroup = 3;                              //
    static constexpr int C_SomeipServiceInterfaceDeployment_fieldDeployment = 2;                         //
    static constexpr int C_SomeipServiceInterfaceDeployment_methodDeployment = 1;                        //
    static constexpr int C_TransformationPropsSet_transformationProps = 0;                               //
    static constexpr int C_UserDefinedServiceInterfaceDeployment_eventDeployment = 0;                    //
    static constexpr int C_UserDefinedServiceInterfaceDeployment_fieldDeployment = 2;                    //
    static constexpr int C_UserDefinedServiceInterfaceDeployment_methodDeployment = 1;                   //
    static constexpr int N_ApplicationArrayElement = 21;                                                 //
    static constexpr int N_ApplicationAssocMapElement_Key = 22;                                          //
    static constexpr int N_ApplicationAssocMapElement_Value = 23;                                        //
    static constexpr int N_ApplicationRecordElement = 24;                                                //
    static constexpr int N_AutosarDataType = 20;                                                         // envelope for all concrete types in scope
    static constexpr int N_DataTypeMap = 38;                                                             // Codegeneration
    static constexpr int N_DataTypeMappingSet = 37;                                                      // Codegeneration
    static constexpr int N_ENUM = 3;                                                                     // list of literals in ENUM
    static constexpr int N_ENUMS = 2;                                                                    // ENUMS are defined in AUTOSAR Meta Model.
    static constexpr int N_EthConnector = 9;                                                             //
    static constexpr int N_EthConnectorAddressIPV4 = 12;                                                 //
    static constexpr int N_EthConnectorAddressIPV6 = 13;                                                 //
    static constexpr int N_IREF4PortPrototype = 61;                                                      //
    static constexpr int N_IREF4PortPrototypeOWNERS = 62;                                                //
    static constexpr int N_IREFS = 5;                                                                    // IREFS represent the target of an AUTOSAR Instance Reference
    static constexpr int N_ImplementationCppSubElement = 27;                                             // Codegeneration / concrete classes are CustomCppImplementationDataType and StdCppImplementationDataType
    static constexpr int N_ImplementationCppTemplateArgument = 28;                                       // Codegeneration / concrete classes are CustomCppImplementationDataType and StdCppImplementationDataType
    static constexpr int N_IpcConnector = 7;                                                             //
    static constexpr int N_LITERAL = 4;                                                                  //
    static constexpr int N_MachineDesign = 8;                                                            //
    static constexpr int N_ProcessDesign = 10;                                                           //
    static constexpr int N_ProvidedSomeipEventGroup = 51;                                                // necessary for GW implementation / used during runtime
    static constexpr int N_ProvidedSomeipEventProps = 52;                                                // necessary for GW implementation / used during runtime
    static constexpr int N_ProvidedSomeipMethodProps = 53;                                               // necessary for GW implementation / used during runtime
    static constexpr int N_ProvidedSomeipServiceInstance = 50;                                           // necessary for GW implementation / used during runtime
    static constexpr int N_ProvidedUserDefinedServiceInstance = 76;                                      //
    static constexpr int N_ROOT = 0;                                                                     // ROOT Structure NOT TO BE CHANGED !
    static constexpr int N_RequiredSomeipEventGroup = 56;                                                // necessary for GW implementation / used during runtime
    static constexpr int N_RequiredSomeipMethodProps = 58;                                               // necessary for GW implementation / used during runtime
    static constexpr int N_RequiredSomeipServiceInstance = 55;                                           // necessary for GW implementation / used during runtime
    static constexpr int N_RequiredSomeipServiceVersionBlacklist = 57;                                   //
    static constexpr int N_RequiredUserDefinedServiceInstance = 78;                                      //
    static constexpr int N_ServiceInstanceToPortPrototypeMapping = 60;                                   // necessary for GW implementation / used during runtime
    static constexpr int N_ServiceInterface = 30;                                                        // necessary for GW implementation / used during runtime
    static constexpr int N_ServiceInterfaceEvent = 31;                                                   // necessary for GW implementation / used during runtime
    static constexpr int N_ServiceInterfaceField = 33;                                                   // necessary for GW implementation / used during runtime
    static constexpr int N_ServiceInterfaceMethod = 32;                                                  // necessary for GW implementation / used during runtime
    static constexpr int N_ServiceInterfaceMethodArgument = 34;                                          // necessary for GW implementation / used during runtime
    static constexpr int N_SomeipEventDeployment = 41;                                                   // necessary for GW implementation / used during runtime
    static constexpr int N_SomeipEventGroup = 44;                                                        // necessary for GW implementation / used during runtime
    static constexpr int N_SomeipEventGroupContent = 45;                                                 // necessary for GW implementation / used during runtime
    static constexpr int N_SomeipFieldDeployment = 43;                                                   // necessary for GW implementation / used during runtime
    static constexpr int N_SomeipFieldDeployment_Notifier = 46;                                          // necessary for GW implementation / used during runtime
    static constexpr int N_SomeipMethodDeployment = 42;                                                  // necessary for GW implementation / used during runtime
    static constexpr int N_SomeipSdAddressIPV4 = 15;                                                     //
    static constexpr int N_SomeipSdAddressIPV6 = 16;                                                     //
    static constexpr int N_SomeipServiceDiscovery = 14;                                                  //
    static constexpr int N_SomeipServiceInterfaceDeployment = 40;                                        // necessary for GW implementation / used during runtime
    static constexpr int N_TransformationPropsApSomeip = 18;                                             //
    static constexpr int N_TransformationPropsSet = 17;                                                  //
    static constexpr int N_UNUSED = 1;                                                                   // UNUSED container allows to keep nodeIndex sequence if nodes are disabled.
    static constexpr int N_UserDefinedEventDeployment = 71;                                              //
    static constexpr int N_UserDefinedFieldDeployment = 73;                                              //
    static constexpr int N_UserDefinedMethodDeployment = 72;                                             //
    static constexpr int N_UserDefinedServiceInterfaceDeployment = 70;                                   //
    static constexpr int R_ApplicationArrayElement_type = 0;                                             // targetNode[AutosarDataType] target is an ApplicationDataType
    static constexpr int R_ApplicationAssocMapElement_Key_type = 0;                                      // targetNode[AutosarDataType] target is an ApplicationDataType
    static constexpr int R_ApplicationAssocMapElement_Value_type = 0;                                    // targetNode[AutosarDataType] target is an ApplicationDataType
    static constexpr int R_ApplicationRecordElement_type = 0;                                            // targetNode[AutosarDataType] target is an ApplicationDataType
    static constexpr int R_AutosarDataType_typeReference = 0;                                            // targetNode[AutosarDataType] target is C++ ImplementationDataType
    static constexpr int R_DataTypeMap_applicationDataType = 0;                                          // targetNode[AutosarDataType] this is an application data type
    static constexpr int R_DataTypeMap_implementationDataType = 1;                                       // targetNode[AutosarDataType] this is a C++ implementation data type
    static constexpr int R_IREF4PortPrototypeOWNERS_irefOwner = 0;                                       // targetNode[ServiceInstanceToPortPrototypeMapping]
    static constexpr int R_IREF4PortPrototype_process = 0;                                               // targetNode[ProcessDesign]
    static constexpr int R_ImplementationCppSubElement_type = 0;                                         // targetNode[AutosarDataType] target is C++ ImplementationDataType
    static constexpr int R_ImplementationCppTemplateArgument_type = 0;                                   // targetNode[AutosarDataType] target is C++ ImplementationDataType
    static constexpr int R_ProvidedSomeipEventGroup_eventGroup = 0;                                      // targetNode[SomeipEventGroup]
    static constexpr int R_ProvidedSomeipEventProps_event = 0;                                           // targetNode[SomeipEventDeployment]
    static constexpr int R_ProvidedSomeipMethodProps_method = 0;                                         // targetNode[SomeipMethodDeployment]
    static constexpr int R_ProvidedSomeipServiceInstance_commConnector = 0;                              // targetNode[EthConnector]
    static constexpr int R_ProvidedSomeipServiceInstance_serviceInterface = 1;                           // targetNode[SomeipServiceInterfaceDeployment]
    static constexpr int R_ProvidedUserDefinedServiceInstance_commConnector = 0;                         // targetNode[IpcConnector]
    static constexpr int R_ProvidedUserDefinedServiceInstance_serviceInterface = 1;                      // targetNode[UserDefinedServiceInterfaceDeployment]
    static constexpr int R_ROOT_propagateCommConnector = 0;                                              // targetNode[EthConnector] used to intermediate storage while propagating reference to SomeipServiceInstance.commConnector
    static constexpr int R_ROOT_propagateCommConnector2 = 1;                                             // targetNode[IpcConnector] used to intermediate storage while propagating reference to UserDefinedServiceInstance.commConnector
    static constexpr int R_RequiredSomeipEventGroup_eventGroup = 0;                                      // targetNode[SomeipEventGroup]
    static constexpr int R_RequiredSomeipMethodProps_method = 0;                                         // targetNode[SomeipMethodDeployment]
    static constexpr int R_RequiredSomeipServiceInstance_commConnector = 0;                              // targetNode[EthConnector]
    static constexpr int R_RequiredSomeipServiceInstance_serviceInterface = 1;                           // targetNode[SomeipServiceInterfaceDeployment]
    static constexpr int R_RequiredUserDefinedServiceInstance_commConnector = 0;                         // targetNode[IpcConnector]
    static constexpr int R_RequiredUserDefinedServiceInstance_serviceInterface = 1;                      // targetNode[UserDefinedServiceInterfaceDeployment]
    static constexpr int R_ServiceInstanceToPortPrototypeMapping_iref = 3;                               // targetNode[IREF4PortPrototype]
    static constexpr int R_ServiceInstanceToPortPrototypeMapping_process = 0;                            // targetNode[ProcessDesign]
    static constexpr int R_ServiceInstanceToPortPrototypeMapping_someipProvidedServiceInstance = 1;      // targetNode[ProvidedSomeipServiceInstance]
    static constexpr int R_ServiceInstanceToPortPrototypeMapping_someipRequiredServiceInstance = 2;      // targetNode[RequiredSomeipServiceInstance]
    static constexpr int R_ServiceInstanceToPortPrototypeMapping_userdefinedProvidedServiceInstance = 4; // targetNode[ProvidedUserDefinedServiceInstance]
    static constexpr int R_ServiceInstanceToPortPrototypeMapping_userdefinedRequiredServiceInstance = 5; // targetNode[RequiredUserDefinedServiceInstance]
    static constexpr int R_ServiceInterfaceEvent_type = 0;                                               // targetNode[AutosarDataType]
    static constexpr int R_ServiceInterfaceField_type = 0;                                               // targetNode[AutosarDataType]
    static constexpr int R_ServiceInterfaceMethodArgument_type = 0;                                      // targetNode[AutosarDataType]
    static constexpr int R_SomeipEventDeployment_event = 0;                                              // targetNode[ServiceInterfaceEvent]
    static constexpr int R_SomeipEventGroupContent_event = 0;                                            // targetNode[SomeipEventDeployment] alternative reference target
    static constexpr int R_SomeipEventGroupContent_fieldNotifier = 1;                                    // targetNode[SomeipFieldDeployment_Notifier] alternative reference target
    static constexpr int R_SomeipFieldDeployment_Notifier_event = 0;                                     // targetNode[ServiceInterfaceEvent]
    static constexpr int R_SomeipFieldDeployment_field = 0;                                              // targetNode[ServiceInterfaceField]
    static constexpr int R_SomeipFieldDeployment_get_method = 1;                                         // targetNode[ServiceInterfaceMethod]
    static constexpr int R_SomeipFieldDeployment_set_method = 2;                                         // targetNode[ServiceInterfaceMethod]
    static constexpr int R_SomeipMethodDeployment_method = 0;                                            // targetNode[ServiceInterfaceMethod]
    static constexpr int R_SomeipServiceInterfaceDeployment_serviceInterface = 0;                        // targetNode[ServiceInterface]
    static constexpr int R_UserDefinedEventDeployment_event = 0;                                         // targetNode[ServiceInterfaceEvent]
    static constexpr int R_UserDefinedFieldDeployment_field = 0;                                         // targetNode[ServiceInterfaceField]
    static constexpr int R_UserDefinedFieldDeployment_get_method = 1;                                    // targetNode[ServiceInterfaceMethod]
    static constexpr int R_UserDefinedFieldDeployment_notifier_event = 3;                                // targetNode[ServiceInterfaceEvent]
    static constexpr int R_UserDefinedFieldDeployment_set_method = 2;                                    // targetNode[ServiceInterfaceMethod]
    static constexpr int R_UserDefinedMethodDeployment_method = 0;                                       // targetNode[ServiceInterfaceMethod]
    static constexpr int R_UserDefinedServiceInterfaceDeployment_serviceInterface = 0;                   // targetNode[ServiceInterface]
};
// =========================================================================================================================
// end generated constexpr
// =========================================================================================================================
#endif // ECUCFG_COM_2_0_METADATA_VARIANT
