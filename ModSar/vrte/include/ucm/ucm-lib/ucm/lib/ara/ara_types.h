//=============================================================================
// C O P Y R I G H T
//-----------------------------------------------------------------------------
// Copyright (c) 2018 by Robert Bosch GmbH. All rights reserved.
//
// This file is property of Robert Bosch GmbH. Any unauthorized copy, use or
// distribution is an offensive act against international law and may be
// prosecuted under federal law. Its content is company confidential.
//=============================================================================

/// @file         ucm/lib/ara/ara_types.h
/// @brief
/// @copyright    Robert Bosch GmbH 2018
/// @author       Vesselin Mladenov
/// @version
/// @remarks

#ifndef UCM_AAP_LIBRARY_LIB_ARA_ARA_TYPES_H_
#define UCM_AAP_LIBRARY_LIB_ARA_ARA_TYPES_H_

#include <array>
#include <vector>
#include <string>
#include <cstdint>


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
typedef __int128 int128_t;
typedef unsigned __int128 uint128_t;
#pragma GCC diagnostic pop


namespace bosch {
namespace vrte {
namespace ucm {
namespace lib {
namespace ara {

struct ARATypes
{
    /// @brief Represents a handle identifier used to reference a particular
    /// transfer request.
    using TransferIdType = std::uint32_t;

    /// @brief Represents a name identifying a SoftwareCluster
    using SwInfoNameType = std::string;

    /// @brief Byte vector representing raw data.
    using ByteVectorType = std::vector<std::uint8_t>;

    /// @brief Represents the return type of the TransferStart method
    enum class TransferStartSuccessType : std::uint8_t
    {
        /// Transfer of data has been successfully initiated.
        kSuccess = 0x00,

        ///< Not enough memory to store the Software Package.
        kInsufficientMemory = 0x01,
    };

    /// @brief Represents the return struct for TransferStart.
    struct TransferStartReturnType
    {
        ///< The TransferId generated by UCM for this transfer
        TransferIdType TransferId;

        ///< The result of the transfer start operation.
        TransferStartSuccessType TransferStartSuccess;
    };

    /// @brief Represents the return type of the TransferData method
    enum class TransferDataReturnType : std::uint8_t
    {
        /// Data has been successfully transmitted and stored
        kSuccess = 0x00,

        ///< The block counter value is not as expected by UCM.
        kIncorrectBlock = 0x01,

        ///< The size of the Software Package exceeds the provided size in
        ///< TransferStart.
        kIncorrectSize = 0x02,

        ///< Not enough memory to store the Software Package.
        kInsufficientMemory = 0x03,

        /// The Transfer ID is invalid.
        kInvalidTransferId = 0x04,

        /// The operation is not permitted in the current state.
        kOperationNotPermitted = 0x05,
    };

    /// @brief Represents the return type of the TransferExit method
    enum class TransferExitReturnType : std::uint8_t
    {
        /// Data transmission has been successfully finished. The complete
        /// Software Package has been received.
        kSuccess = 0x00,

        /// TransferExit has been called but total transferred data size does
        /// not match expected data size provided with TransferStart call.
        kInsufficientData = 0x01,

        /// Transferred package integrity or authentication check failed.
        kPackageInconsistent = 0x02,

        /// The Transfer ID is invalid.
        kInvalidTransferId = 0x03,

        /// The operation is not permitted in the current state.
        kOperationNotPermitted = 0x04,
    };

    /// @brief Represents the result of processing one or several software
    /// packages.
    enum class ProcessResultType : std::uint8_t
    {
        /// Software package has been successfully processed.
        kSuccess = 0x00,

        /// Another processing is already ongoing and therefore the current
        /// processing request has to be rejected.
        kReject = 0x01,

        /// Package manifest could not be read.
        kInvalidManifest = 0x02,

        /// Insufficient memory to perform processing.
        kInsufficientMemory = 0x03,

        /// The Transfer ID is invalid.
        kInvalidTransferId = 0x04,

        /// The operation is not permitted in the current state.
        kOperationNotPermitted = 0x05,

        /// Authentication of the software package failed.
        kErrorAuthenticationFailed = 0x06,
    };

    /// @brief Represents the return struct for ProcessSwPackageReturnType.
    struct ProcessSwPackageReturnType
    {
        /// The result of the process operation
        ProcessResultType result;

        /// The transfer ID of the processed Software Package
        TransferIdType transferId;
    };

    /// @brief Represents the state of a Software Package on the Platform.
    enum class SwPackageStateType : std::uint8_t
    {
        /// Software package is being transferred, i.e. not completely received.
        kTransferring = 0x00,

        /// Software package is completely transferred and ready to be
        /// processed.
        kTransferred = 0x01,

        /// Software package is currently being processed.
        kProcessing = 0x02,

        /// Software package processing finished.
        kProcessed = 0x03,

        /// Software package is being processed from a stream.
        kProcessingStream = 0x04,
    };


    /// @brief Represents the information of a Software Package
    struct SwPackageInfoType
    {
        /// Name of the Software Package
        SwInfoNameType Name{};

        /// Version of the Software Package
        std::string Version{};

        /// TransferID of the Software Package
        TransferIdType TransferID{};

        ///
        uint64_t ConsecutiveBytesReceived{};

        ///
        uint64_t ConsecutiveBlocksReceived{};

        /// State of the Software Package
        SwPackageStateType State{};
    };
    /// brief Represents a list of Software Packages
    using SwPackageInfoVectorType = std::vector<SwPackageInfoType>;

    /// @brief Represents the state of a SoftwareCluster on the adaptive
    /// platform.
    enum class SwClusterInfoStateType : std::uint8_t
    {
        /// State of a SoftwareCluster that is installed on the adaptive
        /// platform and installation has finished.
        kPresent = 0x00,

        /// State of a SoftwareCluster that has been newly installed.
        kAdded = 0x01,

        /// State of a SoftwareCluster that has been updated but not yet
        /// activated.
        kUpdated = 0x02,

        /// State of a SoftwareCluster that has been removed.
        kRemoved = 0x03,
    };

    /// @brief Represents the state of a Software Package on the Platform
    enum class LogLevelType : std::uint8_t
    {
        /// Logging is deactivated.
        kOff = 0x00,

        /// Only fatal messages are logged.
        kFatal = 0x01,

        /// Only messages up to error level are logged.
        kError = 0x02,

        /// Only messages up to warning level are logged.
        kWarning = 0x03,

        /// Only messages up to info level are logged.
        kInfo = 0x04,

        /// Only messages up to debug level are logged.
        kDebug = 0x05,

        /// Only messages up to verbose level are logged.
        kVerbose = 0x06,
    };

    /// @brief Represents a single log message with a log level.
    struct LogEntryType
    {
        /// The log level of the log message.
        LogLevelType LogLevel;

        /// The log message.
        std::string Message;
    };

    /// @brief Represents a list of log messages.
    using LogType = std::vector<LogEntryType>;

    /// @brief Represents the state of UCM.
    enum class PackageManagerStatusType : std::uint8_t
    {
        /// UCM is ready to receive software packages or start processing if
        /// software packages are present.
        kIdle = 0x00,

        /// UCM has processed one or several packages and waits for additional
        /// packages, activation or reversion of processed packages.
        kReady = 0x01,

        /// UCM is currently in the middle of processing a Software Package,
        /// i.e. a client has called ProcessSwPackage.
        kBusy = 0x02,

        /// UCM is activating the processed packages.
        kActivating = 0x03,

        /// Software changes introduced with processed Software Packages has
        /// been activated and executed.
        kActivated = 0x04,

        /// UCM is reverting changes introduced with processed packages
        kRollingBack = 0x05,

        /// Software changes introduced with processed Software Packages has
        /// been deactivated and original software is executed.
        kRolledBack = 0x06,

        /// Making sure that the system is in a clean state.
        kCleaningUp = 0x07,

        /// UCM (via State Management) is checking that the processed
        /// packages have been properly restarted.
        kVerifying  = 0x08,
    };

    /// @brief Represents the return type of the Activate method.
    enum class ActivateReturnType : std::uint8_t
    {
        /// Activation successful.
        kSuccess = 0x00,

        /// Activate failed because no packages where processed.
        kErrorNoProcessedPackages = 0x01,

        /// Activate failed.
        kErrorDuringActivation = 0x02,

        /// Activate cannot be performed because previous processing is invalid.
        kErrorNoValidProcessing = 0x03,

        /// Activate cannot be performed because of missing dependencies.
        kMissingDependencies = 0x04,
    };

    /// @brief Represents the return type of the Cancel method.
    enum class CancelReturnType : std::uint8_t
    {
        /// Cancel successful.
        kSuccess = 0x00,

        /// Cancel failed.
        kError = 0x01,

        /// The operation is not permitted in the current state.
        kOperationNotPermitted = 0x02,
    };

    /// @brief Represents the return type of the RevertProcessedSwPackages
    /// method.
    enum class RevertProcessedSwPackagesReturnType : std::uint8_t
    {
        /// Packages have been reverted successfully.
        kSuccess = 0x00,

        /// RevertProcessedSwPackages has been called without prior processing
        /// of a Software Package.
        kNothingToRevert = 0x01,

        /// RevertProcessedSwPackages failed.
        kNotAbleToRevertPackages = 0x02,
    };

    /// @brief Represents the return type of the Rollback method.
    enum class RollbackReturnType : std::uint8_t
    {
        /// Rollback successful.
        kSuccess = 0x00,

        /// Rollback cannot be performed due to no rollback data available.
        kNothingToRollback = 0x01,

        /// Rollback failed.
        kNotAbleToRollback = 0x02,
    };

    /// @brief General response type used for SetLogLevel.
    enum class GeneralResponseType : std::uint8_t
    {
        /// Request successful.
        kSuccess = 0x00,

        /// General reject.
        kGeneralReject = 0x01,

        /// A general memory error occured.
        kGeneralMemoryError = 0x02,

        /// The transfer ID parameter is invalid.
        kTransferIdInvalid = 0x03,

        /// The operation is not supported in the current context.
        kOperationNotPermitted = 0x04,
    };

    /// @brief General response type used for SetLogLevel.
    enum class FinishReturnType : std::uint8_t
    {
        /// General reject.
        kSuccess = 0x00,

        /// A general memory error occured.
        kUndefinedError = 0x01,

        /// The operation is not permitted in the current state.
        kOperationNotPermitted = 0x02,
    };

    /// @brief Represents the ApplicationError return types
    enum class ApplicationErrorsType : std::uint8_t
    {
        Ok                                   = 0,
        InsufficientMemory                   = 1,  ///< Insufficient memory to perform operation.
        IncorrectBlock                       = 2,  ///< The the same block number is received twice.
        IncorrectSize                        = 3,  ///< The size of the Software Package exceeds the provided size in TransferStart.
        InvalidTransferId                    = 4,  ///< The Transfer ID is invalid.
        OperationNotPermitted                = 5,  ///< The operation is not supported in the current context.
        InsufficientData                     = 6,  ///< TransferExit has been called but total transferred data size does not match expected data size provided with TransferStart call.
        PackageInconsistent                  = 7,  ///< Package integrity check failed.
        AuthenticationFailed                 = 8,  ///< Software Package authentication failed.
        OldVersion                           = 9,  ///< Software Package version is too old.
        GeneralReject                        = 10, ///< General reject.
        GeneralMemoryError                   = 11, ///< A general memory error occured.
        ServiceBusy                          = 12, ///< Another processing is already ongoing and therefore the current processing request has to be rejected.
        InvalidManifest                      = 13, ///< Package manifest could not be read.
        NothingToRevert                      = 14, ///< RevertProcessedSwPackages has been called without prior processing of a Software Package.
        NotAbleToRevertPackages              = 15, ///< RevertProcessedSwPackages failed.
        CancelFailed                         = 16, ///< Cancel failed.
        NothingToRollback                    = 17, ///< Rollback cannot be performed due to no rollback data available.
        NotAbleToRollback                    = 18, ///< Rollback failed.
        PreActivationFailed                  = 19, ///< Error during preActivation step.
        ErrorNoValidProcessing               = 20, ///< Activate cannot be performed because previous processing is invalid.
        MissingDependencies                  = 21, ///< Activate cannot be performed because of missing dependencies.
        ProcessSwPackageCancelled            = 22, ///< The processing operation has been interrupted by a Cancel() call.
        ProcessedSoftwarePackageInconsistent = 23, ///< The processed Software Package integrity check has failed.
        IncompatiblePackageVersion           = 24, ///< The version of the Software Package to be processed is not compatible with the current version of UCM.
        BlockInconsistent                    = 25, ///< Consistency check for transferred block failed.
        TransferInterrupted                  = 26, ///< Transfer has been interrupted.
        VerificationFailed                   = 27  ///< Error during verification step.
    };

    /// @brief Action to perform in the Activate() method call
    enum class ActivateOptionType : std::uint8_t
    {
        kDefault               = 0x00, ///< No override, default behaviour.
        kFunctionGroupRestart  = 0x01, ///< Request restart of the functional group.
        kSystemReset           = 0x02, ///< Request reset of the system.
    };

    /// @brief Action to perform in the
    enum class ActionType : std::uint8_t
    {
        kUpdate  = 0x00, ///< Update of a SoftwareCluster.
        kInstall = 0x01, ///< Installation of a new SoftwareCluster.
        kRemove  = 0x02, ///< Removal of a SoftwareCluster.
    };

    /// @brief Represents the state of a SoftwareCluster on the adaptive
    /// platform.
    enum class SwClusterStateType : std::uint8_t
    {
        /// State of a SoftwareCluster that is installed on the adaptive
        /// platform and installation has finished.
        kPresent = 0x00,

        /// State of a SoftwareCluster that has been newly installed.
        kAdded = 0x01,

        /// State of a SoftwareCluster that has been updated but not yet
        /// activated.
        kUpdated = 0x02,

        /// State of a SoftwareCluster that has been removed.
        kRemoved = 0x03,
    };

    /// @brief Represents the information of a SoftwareCluster
    struct SwClusterInfoType
    {
        /// Name of the SoftwareCluster
        SwInfoNameType Name{};

        /// Version of the SoftwareCluster
        std::string Version{};

        /// State of the SoftwareCluster
        SwClusterStateType State{};
    };

    /// @brief Represents a list of SoftwareClusters
    using SwClusterInfoVectorType = std::vector<SwClusterInfoType>;

    enum class ResolutionType : std::uint8_t
    {
        kSuccessfull = 0x00, ///< UCM�s action was successful.
        kFailed      = 0x01, ///< UCM�s action failed.
    };

    /// @brief Represents a history entries
    struct GetHistoryType {

        /// Time (UTC) in milliseconds of UCM�s action resolution since 01.01.1970.
        std::uint64_t Time;

        /// Name of the processed SW cluster
        SwInfoNameType Name;

        /// Version of the processed SW cluster
        std::string Version;

        /// Action: (Update, Install, Remove)
        ActionType Action;

        /// Result: (Successfull, Failed)
        ResolutionType Resolution;
    };

    /// @brief Represents a list of history entries
    using GetHistoryVectorType = std::vector<GetHistoryType>;
};

}    // namespace ara
}    // namespace lib
}    // namespace ucm
}    // namespace vrte
}    // namespace bosch

#endif    // UCM_AAP_LIBRARY_LIB_ARA_ARA_TYPES_H_
